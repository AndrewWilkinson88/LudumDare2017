class: house

	array: rooms, objects of class::room

	method: constructor
		initialize array: rooms
		call create_house
	
	method: create_house 
		^ start with one room with the exit, procedurally generate the house 1 room at a time.
		
		#FIRST ROOM
		create object::room1::constructor	#create the 1st room
		call object::room1::add_exit	#initialize the first room with the exit
		
		For 1...10 rooms:
			create object::roomX::constructor   #create the X room
			call object::room1::add_door(random_direction, roomX)	#add a door from first room to the next room. The door back should be created automatically.


	class: room
		scalar: type (one of 10 possible room-type values)
				^ kitchen, dining, living, bed1, bed2, bed3, bath1, bath2, foyer, office

		hash: exits: north->undef
					 west->undef
					 east->undef
					 south->undef

		method: constructor
			initialize scalar: type (pick a random one?)
			initialize hash: doors -> all values undef

		method: add_door (returns nothing) (accepts direction, other_room object)
			if hash::exits::given_direction is undef:
				set hash::exits::given_direction (ie: North) to (object::other_room)

			check if that object::other_room has this room in the hash::exits::OPPOSITEdirection (ie: south).
				if hash::exits::OPPOSITEdirection is undef, then call add_door(South, Object::room1)
				if hash::exits::OPPOSITEdirection is Object::room1, everything is good. Return.
				if hash::exits::OPPOSITEdirection is anything else, fail, return error.

		method: add_exit (returns nothing) (accepts nothing)
			add value::exit to array::exits


